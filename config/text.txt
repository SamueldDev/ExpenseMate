

// api calls


// for transaction

1. Add a Transaction
Endpoint
POST /api/transactions

Request Headers
Authorization: Bearer <JWT_TOKEN>
Content-Type: application/json

Request Body Example
{
  "name": "Groceries",
  "type": "expense",
  "amount": 12000,
  "category": "Food",
  "date": "2025-10-10",
  "note": "Bought food items",
  "budgetId": "6719fdcc11a9f02b3a745d20"
}

Expected Response (201 Created)
{
  "message": "Transaction added successfully",
  "transaction": {
    "_id": "671a00b511a9f02b3a745d31",
    "user": "6719fb2011a9f02b3a745d15",
    "budget": "6719fdcc11a9f02b3a745d20",
    "title": "Groceries",
    "amount": 12000,
    "category": "Food",
    "date": "2025-10-10T00:00:00.000Z",
    "note": "Bought food items",
    "__v": 0
  }
}


{
  "name": "Fuel Refill",
  "type": "expense",
  "amount": 8500,
  "category": "Transport",
  "date": "2025-10-12",
  "note": "Filled the car tank at Total station",
  "budgetId": "68f2b91d200f584d25b88d20"
}



// add a budget

{
  "name": "Entertainment saga",
  "total_amount": 20000,
  "limit_amount": 18000,
  "start_date": "2025-11-01",
  "end_date": "2025-11-15"
}

// add transaction
{
  "name": "Movie Night",
  "type": "expense",
  "amount": 4500,
  "category": "Entertainment",
  "date": "2025-10-15",
  "note": "Watched a movie with friends",
  "budgetId": "68f2b91d200f584d25b88d20"
}

{
  "name": "Freelance Payment",
  "type": "income",
  "amount": 50000,
  "category": "Work",
  "date": "2025-10-11",
  "note": "Payment from client project",
}

  /api/users/login

  /api/transactions

  /api/transactions/summary
  /api/transactions/monthly
  /api/transactions/categories

http://localhost:3000/api/transactions/summary
http://localhost:3000/api/transactions/monthly
http://localhost:3000/api/transactions/categories

http://localhost:3000/api/transactions?category=Work

http://localhost:3000/api/transactions?category=Entertainment




 2. Get All Transactions
Endpoint
GET /api/transactions

Expected Response (200 OK)
{
  "message": "Transactions fetched successfully",
  "transactions": [
    {
      "_id": "671a00b511a9f02b3a745d31",
      "title": "Groceries",
      "amount": 12000,
      "category": "Food",
      "date": "2025-10-10T00:00:00.000Z",
      "note": "Bought food items",
      "budget": "6719fdcc11a9f02b3a745d20"
    },
    {
      "_id": "671a01f611a9f02b3a745d48",
      "title": "Electricity Bill",
      "amount": 5000,
      "category": "Utilities",
      "date": "2025-10-09T00:00:00.000Z",
      "note": "PHCN recharge"
    }
  ]
}


3. Get a Single Transaction
Endpoint
GET /api/transactions/:id

Example
GET /api/transactions/671a00b511a9f02b3a745d31

Expected Response (200 OK)
{
  "message": "Transaction fetched successfully",
  "transaction": {
    "_id": "671a00b511a9f02b3a745d31",
    "name": "Groceries",
    "type": "expense",
    "amount": 12000,
    "category": "Food",
    "date": "2025-10-10T00:00:00.000Z",
    "note": "Bought food items",
    "budget": "6719fdcc11a9f02b3a745d20"
  }
}

If transaction doesnâ€™t exist:
{
  "message": "Transaction not found"
}


4. Update a Transaction
Endpoint
PUT /api/transactions/:id

Example
PUT /api/transactions/671a00b511a9f02b3a745d31

Request Body Example
{
  "name": "updated Groceries",
  "type": "expense",
  "amount": 13000,
  "category": "Food",
  "note": "Updated grocery expense",
  "budgetId": "6719fdcc11a9f02b3a745d20"
}

Expected Response (200 OK)
{
  "message": "Transaction updated successfully",
  "transaction": {
    "_id": "671a00b511a9f02b3a745d31",
    "title": "Supermarket Shopping",
    "amount": 13000,
    "category": "Food",
    "date": "2025-10-10T00:00:00.000Z",
    "note": "Updated grocery expense",
    "budget": "6719fdcc11a9f02b3a745d20"
  }
}


5. Delete a Transaction
Endpoint
DELETE /api/transactions/:id

Example
DELETE /api/transactions/671a00b511a9f02b3a745d31

Expected Response (200 OK)
{
  "message": "Transaction deleted successfully"
}

If transaction doesnâ€™t exist:
{
  "message": "Transaction not found"
}


6. Get Transactions by Budget
Endpoint
GET /api/transactions/budget/:budgetId

Example
GET /api/transactions/budget/6719fdcc11a9f02b3a745d20

Expected Response (200 OK)
{
  "message": "Transactions fetched successfully",
  "transactions": [
    {
      "_id": "671a00b511a9f02b3a745d31",
      "title": "Groceries",
      "amount": 12000,
      "category": "Food",
      "date": "2025-10-10T00:00:00.000Z",
      "note": "Bought food items"
    },
    {
      "_id": "671a08b611a9f02b3a745d7b",
      "title": "Snacks",
      "amount": 2000,
      "category": "Food",
      "date": "2025-10-12T00:00:00.000Z"
    }
  ]
}


7. Get Transaction Summary
Endpoint
GET /api/transactions/summary

Expected Response (200 OK)
{
  "message": "Summary fetched successfully",
  "summary": {
    "totalIncome": 80000,
    "totalExpense": 45000
  }
}

If no transactions yet:
{
  "message": "Summary fetched successfully",
  "summary": {
    "totalIncome": 0,
    "totalExpense": 0
  }
}




// for budget
Endpoint
POST /api/budgets

Request Body Example
{
  "name": "October Groceries",
  "total_amount": 50000,
  "limit_amount": 45000,
  "start_date": "2025-10-01",
  "end_date": "2025-10-31"
}

ðŸ“¥ Expected Response
{
  "message": "Budget created successfully",
  "budget": {
    "_id": "671a2ac8d5f212b4b731aa7e",
    "user": "671a1fd8d5f212b4b731aa3c",
    "name": "October Groceries",
    "total_amount": 50000,
    "limit_amount": 45000,
    "spent_amount": 0,
    "start_date": "2025-10-01T00:00:00.000Z",
    "end_date": "2025-10-31T00:00:00.000Z",
    "createdAt": "2025-10-15T15:00:00.000Z",
    "updatedAt": "2025-10-15T15:00:00.000Z",
    "__v": 0
  }
}


{
  "name": "October snacks",
  "total_amount": 20000,
  "limit_amount": 18000,
  "start_date": "2025-10-17",
  "end_date": "2025-10-31"
}

{
  "name": "Entertainment saga",
  "total_amount": 20000,
  "limit_amount": 18000,
  "start_date": "2025-11-01",
  "end_date": "2025-11-15"
}


 What it does:
 Fetches all budgets belonging to the authenticated user, newest first.

Endpoint
GET /api/budgets

Expected Response
{
  "message": "Budgets fetched successfully",
  "budgets": [
    {
      "_id": "671a2ac8d5f212b4b731aa7e",
      "name": "October Groceries",
      "total_amount": 50000,
      "limit_amount": 45000,
      "spent_amount": 20000
    },
    {
      "_id": "671a2d58d5f212b4b731aa93",
      "name": "Transportation",
      "total_amount": 30000,
      "limit_amount": 25000,
      "spent_amount": 15000
    }
  ]
}


Delete a Budget
Endpoint
DELETE /api/budgets/:id

Example
DELETE /api/budgets/671a2ac8d5f212b4b731aa7e

Expected Response
{
  "message": "Budget and associated transactions deleted successfully"
}

If budget not found:
{
  "message": "Budget not found"
}



Get Budget Details + Transactions
What it does:
 Fetches a specific budget (by ID) and includes all transactions linked to it.



Endpoint
GET /api/budgets/:id

Example
GET /api/budgets/671a2ac8d5f212b4b731aa7e

Expected Response
{
  "message": "Budget details fetched successfully",
  "budget": {
    "_id": "671a2ac8d5f212b4b731aa7e",
    "name": "October Groceries",
    "total_amount": 50000,
    "limit_amount": 45000,
    "spent_amount": 20000,
    "start_date": "2025-10-01T00:00:00.000Z",
    "end_date": "2025-10-31T00:00:00.000Z"
  },
  "transactions": [
    {
      "_id": "671a3f08d5f212b4b731aabc",
      "title": "Market Shopping",
      "amount": 10000,
      "category": "Food",
      "date": "2025-10-10T00:00:00.000Z"
    },
    {
      "_id": "671a3f60d5f212b4b731aace",
      "title": "Snacks",
      "amount": 5000,
      "category": "Food",
      "date": "2025-10-12T00:00:00.000Z"
    }
  ]
}


Update a Budget

What it does:
 Updates an existing budgetâ€™s details (if it belongs to the logged-in user).

Endpoint
PUT /api/budgets/:id

Request Example
{
  "name": "Updated October Budget",
  "total_amount": 60000,
  "limit_amount": 55000
}

Expected Response
{
  "message": "Budget updated successfully",
  "budget": {
    "_id": "671a2ac8d5f212b4b731aa7e",
    "name": "Updated October Budget",
    "total_amount": 60000,
    "limit_amount": 55000
  }
}


Add a Transaction to a Budget
Endpoint
POST /api/budgets/:id/transactions

Request Example
{

  "name": "Supermarket Shopping",
  "type": "expense",
  "amount": 15000,
  "category": "Food",
  "date": "2025-10-12",
  "note": "Bought fruits and snacks"
}

Expected Response
{
  "message": "Transaction added to budget successfully",
  "transaction": {
    "_id": "671a4056d5f212b4b731ab0f",
    "user": "671a1fd8d5f212b4b731aa3c",
    "budget": "671a2ac8d5f212b4b731aa7e",
    "title": "Supermarket Shopping",
    "amount": 15000,
    "category": "Food",
    "date": "2025-10-12T00:00:00.000Z",
    "note": "Bought fruits and snacks"
  }
}



Get Summary

GET http://localhost:5000/api/transactions/summary

Response

{
  "totalIncome": 80000,
  "totalExpense": 45000,
  "balance": 35000
}


Get Monthly Chart Data

GET http://localhost:5000/api/transactions/monthly

Response

[
  { "month": "Jan", "income": 120000, "expense": 80000 },
  { "month": "Feb", "income": 100000, "expense": 60000 }
]

Get Category Chart Data

GET http://localhost:5000/api/transactions/categories

Response

[
  { "category": "Food", "type": "expense", "total": 15000 },
  { "category": "Transport", "type": "expense", "total": 7000 },
  { "category": "Salary", "type": "income", "total": 50000 }
]

Get Filtered Transactions

GET

http://localhost:5000/api/transactions?from=2025-10-01&to=2025-10-31&category=Food


Response

[
  {
    "_id": "6711a4f0b25a6f3f2c7f1245",
    "name": "Groceries",
    "type": "expense",
    "amount": 12000,
    "category": "Food",
    "date": "2025-10-10T00:00:00.000Z",
    "note": "Bought food items"
  }
]